substitutions:
  name: esp32s3box3
  loading_illustration_file: images/loading.png
  idle_illustration_file: images/idle_320_240.png
  listening_illustration_file: images/listening_320_240.png
  thinking_illustration_file: images/thinking_320_240.png
  replying_illustration_file: images/replying_320_240.png
  error_illustration_file: images/error_320_240.png
  pills_rem: images/pills.png

  loading_illustration_background_color: '000000'
  idle_illustration_background_color: '000000'
  listening_illustration_background_color: '772A98'
  thinking_illustration_background_color: '772A98'
  replying_illustration_background_color: '772A98'
  error_illustration_background_color: '000000'
  text_red: 'FF3131'
  text_green: '75D15F'
  text_blue: '47B7E9'
  text_amber: 'FBAB35'
  text_lime: '20FC30'
  text_pink: 'D92BBC'

  voice_assist_idle_phase_id: '1'
  voice_assist_listening_phase_id: '2'
  voice_assist_thinking_phase_id: '3'
  voice_assist_replying_phase_id: '4'
  voice_assist_not_ready_phase_id: '10'
  voice_assist_error_phase_id: '11'  
  voice_assist_muted_phase_id: '12'

esphome:
  name: ${name}

  platformio_options:
    board_build.flash_mode: dio
  project:
    name: esphome.voice-assistant
    version: "1.0"
  min_version: 2023.11.5
  on_boot:
      priority: 600
      then: 
        - light.turn_on:
            id: led
            brightness: 100%
        - delay: 10s
        - light.turn_on: 
            id: led
            brightness: 20%
        - delay: 3min
        - light.turn_off: led   
        - script.execute: draw_display
        - delay: 30s
        - if:
            condition:
              lambda: return id(init_in_progress);
            then:
              - lambda: id(init_in_progress) = false;
              - script.execute: draw_display

esp32:
  board: esp32s3box
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_AUDIO_BOARD_CUSTOM: "y"
      CONFIG_ESP32_S3_BOX_3_BOARD: "y"
    components:
      - name: esp32_s3_box_3_board
        source: github://jesserockz/esp32-s3-box-3-board@main
        refresh: 0s

psram:
  mode: octal
  speed: 80MHz

# bluetooth_proxy:
# esp32_ble_tracker:
#   scan_parameters:
#     interval: 1100ms
#     window: 1100ms

external_components:
  - source: github://pr#5230
    components: esp_adf
    refresh: 0s


api:
  on_client_connected:
    - script.execute: draw_display
    - light.turn_on:
        id: led
        brightness: 100%
  on_client_disconnected:
    - script.execute: draw_display

ota:
logger:
  # level: very_verbose
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: 192.168.1.179
  ap:
  on_connect:
    - script.execute: draw_display
  on_disconnect:
    - script.execute: draw_display

time:
  - platform: homeassistant
    id: ha_time
    on_time:
      - seconds: 0
        minutes: 49
        hours: 20
        days_of_week: MON-SUN
        then:
          - script.execute: take_pills
i2c:
  - id: bus_a
    sda: GPIO08
    scl: GPIO18
    scan: false
    sda_pullup_enabled: true
    scl_pullup_enabled: true
    frequency: 100kHz

  - sda: GPIO41
    scl: GPIO40
    scan: false
    sda_pullup_enabled: true
    scl_pullup_enabled: true
    frequency: 100kHz
    id: bus_b

touchscreen:
  platform: gt911
  i2c_id: bus_a
  id: gt911_touchscreen
  interrupt_pin: GPIO3
  on_touch:
      then:
        - light.toggle: led  

button:
  - platform: restart
    id: reboot
    name: "Reboot"

binary_sensor:  
  - platform: gt911
    name: "Home Button"
    gt911_id: gt911_touchscreen
    on_press: 
      then:
        - light.toggle: led  

  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
    name: Top Left Button
    entity_category: diagnostic
    on_click:
    - min_length: 0ms
      max_length: 1s
      then:
        - switch.toggle: mute
    - min_length: 2s
      max_length: 4s
      then:
        - script.stop: take_pills
        - display.page.show: idle_page

  - platform: gpio
    pin:
      number: GPIO21
    name: "Presence detect"
    disabled_by_default: false
    device_class: "occupancy"
    
output:
  - platform: ledc
    pin: GPIO47
    id: backlight_output

light:
  - platform: monochromatic
    id: led
    name: LCD Backlight
    entity_category: config
    output: backlight_output
    default_transition_length: 500ms

esp_adf:
  board: esp32s3box3

microphone:
  - platform: esp_adf
    id: box_mic

# speaker:
#   - platform: esp_adf
#     id: box_speaker

voice_assistant:
  id: va
  microphone: box_mic
  # speaker: box_speaker
  use_wake_word: true
  noise_suppression_level: 1
  auto_gain: 31dBFS
  volume_multiplier: 4.0
  vad_threshold: 3
  on_listening:
    - homeassistant.service:
        service: media_player.play_media
        data:
          media_content_id: media-source://media_source/local/vad.mp3
          media_content_type: music
          entity_id: media_player.s3_player
    - light.turn_on:
        id: led
        brightness: 100%
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
    - script.execute: draw_display
  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: draw_display
  on_tts_start:

    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - script.execute: draw_display
  on_tts_end:
    - homeassistant.service:
        service: media_player.play_media
        data:
          entity_id: media_player.s3_player
          media_content_id: !lambda 'return x;'
          media_content_type: music
          announce: "true"
    - delay: 1s
    - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
    - script.execute: draw_display
    - delay: 10s
    - light.turn_on: 
        id: led
        brightness: 20%
    - delay: 3min
    - light.turn_off: led

  on_error:
    - if:
        condition:
          lambda: return !id(init_in_progress);
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_error_phase_id};  
          - script.execute: draw_display
          - delay: 1s
          - if:
              condition:
                switch.is_off: mute
              then:
                - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
              else:
                - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
          - script.execute: draw_display
  on_client_connected: 
    - if:
        condition:
          switch.is_off: mute
        then:
          - delay: 1s
          - voice_assistant.start_continuous:
          - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
        else:
          - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
    - lambda: id(init_in_progress) = false; 
    - script.execute: draw_display
  on_client_disconnected:
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};  
    - script.execute: draw_display

script:
  - id: draw_display
    then:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - if:
                      condition:
                        api.connected:
                      then:
                        - lambda: |
                            switch(id(voice_assistant_phase)) {
                              case ${voice_assist_listening_phase_id}:
                                id(s3_box_lcd).show_page(listening_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_thinking_phase_id}:
                                id(s3_box_lcd).show_page(thinking_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_replying_phase_id}:
                                id(s3_box_lcd).show_page(replying_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_error_phase_id}:
                                id(s3_box_lcd).show_page(error_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_muted_phase_id}:
                                id(s3_box_lcd).show_page(idle_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_not_ready_phase_id}:
                                id(s3_box_lcd).show_page(no_ha_page);
                                id(s3_box_lcd).update();
                                break;
                              default:
                                id(s3_box_lcd).show_page(idle_page);
                                id(s3_box_lcd).update();
                            }
                      else:
                        - display.page.show: no_ha_page
                        - component.update: s3_box_lcd
                else:
                  - display.page.show: no_wifi_page
                  - component.update: s3_box_lcd
          else:
            - display.page.show: initializing_page
            - component.update: s3_box_lcd
  - id: take_pills
    then:
    - repeat:
        count: 10000
        then:
          - delay: 1s
          - display.page.show: pills_page  
          - delay: 1s
          - display.page.show: idle_page

switch:
  - platform: template
    name: Mute
    id: mute
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:      
            - lambda: id(va).set_use_wake_word(true);
            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
            - if:
                condition:
                  not:
                    - voice_assistant.is_running
                then:
                  - voice_assistant.start_continuous
            - script.execute: draw_display
    on_turn_on:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:      
            - voice_assistant.stop
            - lambda: id(va).set_use_wake_word(false);
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
            - script.execute: draw_display

sensor:
  - platform: homeassistant
    id: in_temp
    entity_id: sensor.living_room_temp
    internal: true
    
  - platform: homeassistant
    id: out_temp
    entity_id: sensor.garden_temperature_garden_temperature
    internal: true 

  - platform: aht10
    i2c_id: bus_b
    variant: AHT20
    temperature:
      name: "Temperature"
    humidity:
      name: "Humidity"
    update_interval: 5s


  - platform: adc
    pin: GPIO10
    name: "Battery voltage"
    id: battery_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 1
    device_class: "voltage"
    entity_category: "diagnostic"
    disabled_by_default: true
    update_interval: 30s
    attenuation: auto
    filters:
        - multiply: 4.11

  - platform: copy
    id: battery_percent
    source_id: battery_voltage
    name: "Battery level"
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: "battery"
    entity_category: "diagnostic"
    filters:
      - lambda: return (x - 2.7) / (4.2 - 2.7) * 100;
      - clamp:
          min_value: 0
          max_value: 100


text_sensor:
  - platform: homeassistant
    id: therm
    entity_id: climate.house_thermostat
    internal: true
    attribute: hvac_action

  - platform: homeassistant
    id: call
    entity_id: sensor.rob_s22_phone_state
    internal: true

globals:
  - id: init_in_progress
    type: bool
    restore_value: no
    initial_value: 'true'
  - id: voice_assistant_phase
    type: int
    restore_value: no
    initial_value: ${voice_assist_not_ready_phase_id}

image:
  - file: ${error_illustration_file}
    id: casita_error
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: ${idle_illustration_file}
    id: casita_idle
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: ${listening_illustration_file}
    id: casita_listening
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: ${thinking_illustration_file}
    id: casita_thinking
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: ${replying_illustration_file}
    id: casita_replying
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: ${loading_illustration_file}
    id: casita_initializing
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: images/error-no-wifi.png
    id: error_no_wifi
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: images/error-no-ha.png
    id: error_no_ha
    resize: 320x240
    type: RGB24
    use_transparency: true
  - file: images/pills.png
    id: pills_rem
    resize: 320x240
    type: RGB24

font:
  - file: "fonts/consola.ttf"
    id: my_font
    size: 14

  - file: "fonts/consola.ttf"
    id: my_font2
    size: 72

  - file: "fonts/consola.ttf"
    id: my_font3
    size: 30

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icon_font_25
    size: 35
    glyphs: ["\U000F036D", "\U000F036C", "\U000F0079", "\U000F0082",
     "\U000F0081", "\U000F0080", "\U000F007F", "\U000F007E", "\U000F007D",
      "\U000F007C", "\U000F007B", "\U000F007A", "\U000F10CD", "\U000F0510",
       "\U000F050F", "\U000F02DC", "\U000F024A", "\U000F03F5", "\U000F03F6", 
       "\U000F11AB"]

  - file: "fonts/DSEG14Classic-Regular.ttf"    
    id: my_fontseg
    size: 72

  - file: "fonts/DSEG7Classic-Regular.ttf"
    id: my_fontseg2
    size: 72

color:
  - id: idle_color
    hex: ${idle_illustration_background_color}
  - id: listening_color
    hex: ${listening_illustration_background_color}
  - id: thinking_color
    hex: ${thinking_illustration_background_color}
  - id: replying_color
    hex: ${replying_illustration_background_color}
  - id: loading_color
    hex: ${loading_illustration_background_color}
  - id: error_color
    hex: ${error_illustration_background_color}
  - id: text_red
    hex: ${text_red}
  - id: text_green
    hex: ${text_green}
  - id: text_blue
    hex: ${text_blue}
  - id: text_amber
    hex: ${text_amber}
  - id: text_lime
    hex: ${text_lime}
  - id: text_pink
    hex: ${text_pink}

spi:
  clk_pin: 7
  mosi_pin: 6

display:
  - platform: ili9xxx
    id: s3_box_lcd
    model: S3BOX
    data_rate: 40MHz
    cs_pin: 5
    dc_pin: 4
    reset_pin:
      number: 48
      inverted: true
    update_interval: 5s
    pages:
      - id: idle_page
        lambda: |-
          it.fill(id(idle_color));
          it.strftime(160, 20, id(my_font3), text_blue, TextAlign::CENTER, "%A %d %b", id(ha_time).now());
          it.strftime(160, 85, id(my_fontseg2), TextAlign::CENTER, "%H :%M", id(ha_time).now());
          it.printf(5, 230, id(icon_font_25), text_pink, TextAlign::BOTTOM_LEFT, "\U000F02DC");
          it.printf(40, 230, id(my_font3), TextAlign::BOTTOM_LEFT, "%.f°c", id(in_temp).state);
          it.printf(245, 230, id(icon_font_25),  text_green, TextAlign::BOTTOM_RIGHT, "\U000F024A");
          it.printf(315, 230, id(my_font3), TextAlign::BOTTOM_RIGHT, "%.f°c", id(out_temp).state);
          if(id(battery_voltage).has_state ()) {
              if(id(battery_voltage).state <= 2.7) {
                  // Replace battery, less than 10% 420, 558 / 87
                  it.printf(120, 130, id(icon_font_25), TextAlign::TOP_CENTER, "\U000F10CD");
              } else if (id(battery_percent).state >= 98) {
                  // "\U000F0079" # mdi-battery
                  it.printf(120, 130, id(icon_font_25), text_green, TextAlign::TOP_CENTER, "\U000F0079");
              } else if (id(battery_percent).state >= 90) {
                  // "\U000F0082" # mdi-battery-90
                  it.printf(120, 130, id(icon_font_25), text_green, TextAlign::TOP_CENTER, "\U000F0082");
              } else if (id(battery_percent).state >= 80) {
                  // "\U000F0081" # mdi-battery-80
                  it.printf(120, 130, id(icon_font_25), text_green, TextAlign::TOP_CENTER, "\U000F0081");
              } else if (id(battery_percent).state >= 70) {
                  // "\U000F0080" # mdi-battery-70
                  it.printf(120, 130, id(icon_font_25), text_green, TextAlign::TOP_CENTER, "\U000F0080");
              } else if (id(battery_percent).state >= 60) {
                  // "\U000F007F" # mdi-battery-60
                  it.printf(120, 130, id(icon_font_25), text_green, TextAlign::TOP_CENTER, "\U000F007F");
              } else if (id(battery_percent).state >= 50) {
                  // "\U000F007E" # mdi-battery-50
                  it.printf(120, 130, id(icon_font_25), text_amber, TextAlign::TOP_CENTER, "\U000F007E");
              } else if (id(battery_percent).state >= 40) {
                  // "\U000F007D" # mdi-battery-40
                  it.printf(120, 130, id(icon_font_25), text_amber, TextAlign::TOP_CENTER, "\U000F007D");
              } else if (id(battery_percent).state >= 30) {
                  // "\U000F007C" # mdi-battery-30
                  it.printf(120, 130, id(icon_font_25), text_red, TextAlign::TOP_CENTER, "\U000F007C");
              } else if (id(battery_percent).state >= 20) {
                  // "\U000F007B" # mdi-battery-20
                  it.printf(120, 130, id(icon_font_25), text_red, TextAlign::TOP_CENTER, "\U000F007B");
              } else if (id(battery_percent).state >= 10) {
                  // "\U000F007A" # mdi-battery-10
                  it.printf(120, 130, id(icon_font_25), text_red ,TextAlign::TOP_CENTER, "\U000F007A");
              }
          }
          if(id(mute).state) {
                  it.printf(157, 130, id(icon_font_25), text_red, TextAlign::TOP_CENTER, "\U000F036D");
          } else {                  
                  it.printf(157, 130, id(icon_font_25), text_green, TextAlign::TOP_CENTER, "\U000F036C");
          }
            if(id(therm).state == "heating") {
                  it.printf(190, 130, id(icon_font_25), text_red, TextAlign::TOP_CENTER, "\U000F0510");
          } else {                  
                  it.printf(190, 130, id(icon_font_25), text_blue, TextAlign::TOP_CENTER, "\U000F050F");
          }

          if(id(call).state == "offhook") {
                  it.printf(80, 128, id(icon_font_25), text_green, TextAlign::TOP_CENTER, "\U000F03F6");
          } else if(id(call).state == "idle") {                
                  it.printf(80, 128, id(icon_font_25), text_red, TextAlign::TOP_CENTER, "\U000F03F5");
          } else if(id(call).state == "ringing") {                
                  it.printf(80, 128, id(icon_font_25), text_green, TextAlign::TOP_CENTER, "\U000F11AB");
          }

      - id: listening_page
        lambda: |-
          it.fill(id(listening_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_listening), ImageAlign::CENTER);
      - id: thinking_page
        lambda: |-
          it.fill(id(thinking_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_thinking), ImageAlign::CENTER);
      - id: replying_page
        lambda: |-
          it.fill(id(replying_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_replying), ImageAlign::CENTER);
      - id: error_page
        lambda: |-
          it.fill(id(error_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_error), ImageAlign::CENTER);
      - id: no_ha_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(error_no_ha), ImageAlign::CENTER);
      - id: no_wifi_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(error_no_wifi), ImageAlign::CENTER);
      - id: initializing_page
        lambda: |-
          it.fill(id(loading_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_initializing), ImageAlign::CENTER);
      - id: pills_page
        lambda: |-
          it.fill(id(loading_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(pills_rem), ImageAlign::CENTER);
 
